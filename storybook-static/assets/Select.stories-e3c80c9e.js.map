{"version":3,"file":"Select.stories-e3c80c9e.js","sources":["../../src/components/Select/select.tsx","../../src/components/Select/option.tsx","../../src/components/Select/index.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, {\n    FC,\n    FunctionComponentElement,\n    ReactNode,\n    SelectHTMLAttributes,\n    createContext,\n    useEffect,\n    useRef,\n    useState\n} from 'react';\nimport useClickOutside from '../../hooks/useClickOutside';\nimport { TransIcon } from '../Icon';\nimport Input from '../Input';\nimport Transition from '../Transition';\nimport { SelectOptionProps } from './option';\n\ntype SelectSize = 'lg' | 'md' | 'sm';\ntype DefInputSize = { width: string; height: string };\nexport interface SelectProps extends Omit<SelectHTMLAttributes<HTMLElement>, 'onChange'> {\n    selectSize?: SelectSize;\n    defSize?: DefInputSize;\n    defOptionValue?: string | string[];\n    placeholder?: string;\n    disabled?: boolean;\n    multiple?: boolean;\n    name?: string;\n    onChange?: (selectedValue: string, selectedValues: string[]) => void /*參數值需優化*/;\n    onVisibleChange?: (visible: boolean) => void;\n    children?: ReactNode;\n}\n\nexport interface ISelectContext {\n    selectedValues: string[];\n    multiple?: boolean;\n    onSelect?: (value: string, isSelected?: boolean) => void;\n}\n\nexport const SelectContext = createContext<ISelectContext>({ selectedValues: [] });\n\nconst Select: FC<SelectProps> = (props) => {\n    const {\n        selectSize,\n        defSize,\n        style,\n        defOptionValue,\n        placeholder,\n        disabled,\n        multiple,\n        name,\n        onChange,\n        onVisibleChange,\n        children,\n        autoFocus\n    } = props;\n    const inputRef = useRef<HTMLInputElement>(null);\n    const containerRef = useRef<HTMLInputElement>(null);\n    const [selectedValues, setSelectedValues] = useState<string[]>(Array.isArray(defOptionValue) ? defOptionValue : []);\n    const [isOptionOpen, setIsOptionOpen] = useState(false);\n    const [value, setValue] = useState(typeof defOptionValue === 'string' ? defOptionValue : '');\n\n    const handleOptionClick = (value: string, isSelected?: boolean) => {\n        let updatedValues: string[] = [];\n        if (!multiple) {\n            setIsOptionOpen(false);\n            setValue(value);\n            onVisibleChange && onVisibleChange(false);\n        } else {\n            setValue('');\n        }\n        if (multiple) {\n            // 第二次選中則取消\n            updatedValues = isSelected ? selectedValues.filter((v) => v !== value) : [...selectedValues, value];\n            setSelectedValues(updatedValues);\n        }\n        onChange && onChange(value, updatedValues);\n    };\n\n    useEffect(() => {\n        if (inputRef.current) {\n            // 原生的 autoFocus 為第一優先\n            !autoFocus && inputRef.current.focus();\n\n            if (multiple && selectedValues.length > 0) {\n                inputRef.current.placeholder = '';\n            } else {\n                placeholder && (inputRef.current.placeholder = placeholder);\n            }\n        }\n    }, [multiple, selectedValues, placeholder]);\n\n    useClickOutside(containerRef, () => {\n        setIsOptionOpen(false);\n        !isOptionOpen && onVisibleChange && onVisibleChange(false);\n    });\n\n    const passedContext: ISelectContext = {\n        onSelect: handleOptionClick,\n        selectedValues,\n        multiple\n    };\n\n    const handleClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        if (!disabled) {\n            setIsOptionOpen(!isOptionOpen);\n            onVisibleChange && onVisibleChange(!isOptionOpen);\n        }\n    };\n\n    const cleanValue = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setValue('');\n    };\n\n    const cleanSelectedValues = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setSelectedValues([]);\n    };\n\n    const renderOptions = () => {\n        return React.Children.map(children, (child, index) => {\n            const childElement = child as FunctionComponentElement<SelectOptionProps>;\n            if ((childElement.type.displayName = 'Option')) {\n                return React.cloneElement(childElement, {\n                    index: `select-${index}`\n                });\n            } else {\n                console.error('Warning: Select has a child which is not a Option component');\n            }\n        });\n    };\n\n    const renderMultipleOption = () => {\n        return selectedValues.map((value, index) => {\n            return (\n                <span className=\"item-tag\" key={`tag-${index}`}>\n                    {value}\n                    <TransIcon\n                        icon=\"times\"\n                        onClick={() => {\n                            handleOptionClick(value, true);\n                        }}\n                    />\n                </span>\n            );\n        });\n    };\n\n    const renderInput = () => {\n        return (\n            <>\n                <div className=\"sd-select-input\" onClick={handleClick}>\n                    <Input\n                        ref={inputRef}\n                        placeholder={placeholder}\n                        value={value}\n                        readOnly\n                        icon=\"angle-down\"\n                        disabled={disabled}\n                        name={name}\n                    />\n                </div>\n            </>\n        );\n    };\n\n    const renderSelect = () => {\n        const containerClass = classNames('sd-select', {\n            [`select-size-${selectSize}`]: selectSize,\n            'is-option-open': isOptionOpen,\n            'is-disabled': disabled,\n            'is-multiple': multiple\n        });\n        const defStyle = {\n            with: `${defSize?.width}`,\n            height: `${defSize?.height}`,\n            ...style\n        };\n\n        return (\n            <>\n                <div className={containerClass} ref={containerRef} style={defStyle}>\n                    {renderInput()}\n                    <SelectContext.Provider value={passedContext}>\n                        <Transition in={isOptionOpen} animation=\"scale-in-top\" timeout={300}>\n                            <ul className=\"select-dropdown\">{renderOptions()}</ul>\n                        </Transition>\n                    </SelectContext.Provider>\n                    {multiple && (\n                        <>\n                            <div className=\"selected-tags\">{renderMultipleOption()}</div>\n                            {selectedValues.length > 1 && (\n                                <TransIcon\n                                    className=\"selected-clean-icon\"\n                                    icon=\"trash-can\"\n                                    onClick={cleanSelectedValues}></TransIcon>\n                            )}\n                        </>\n                    )}\n                    {value && <TransIcon className=\"selected-clean-icon\" icon=\"xmark\" onClick={cleanValue}></TransIcon>}\n                </div>\n            </>\n        );\n    };\n\n    return <>{renderSelect()}</>;\n};\n\nexport default Select;\n","import classNames from 'classnames';\nimport React, { FC, ReactNode, useContext } from 'react';\nimport { TransIcon } from '../Icon';\nimport { SelectContext } from './select';\nexport interface SelectOptionProps {\n    index?: string;\n    value: string;\n    label?: string;\n    disabled?: boolean;\n    children?: ReactNode;\n}\n\nexport const Option: FC<SelectOptionProps> = (props) => {\n    const { value, label, disabled, children, index, ...restProps } = props;\n    const { onSelect, selectedValues, multiple } = useContext(SelectContext);\n    const isSelected = selectedValues.includes(value);\n    const classes = classNames('sd-select-item', {\n        'is-disabled': disabled,\n        'is-selected': isSelected\n    });\n    const handleClick = (e: React.MouseEvent, value: string, isSelected: boolean) => {\n        e.preventDefault();\n        onSelect && !disabled && onSelect(value, isSelected);\n    };\n\n    const renderOption = () => {\n        return (\n            <>\n                <li\n                    key={index}\n                    className={classes}\n                    onClick={(e) => {\n                        handleClick(e, value, isSelected);\n                    }}\n                    {...restProps}>\n                    {!disabled ? children || (label ? label : value) : <del>{label ? label : value}</del>}\n                    {multiple && isSelected && <TransIcon className=\"is-selected-icon\" icon=\"check\" />}\n                </li>\n            </>\n        );\n    };\n\n    return <>{renderOption()}</>;\n};\n\nOption.displayName = 'Option';\n\nexport default Option;\n","import { FC } from 'react';\n\nimport Select, { SelectProps } from './select';\nimport Option, { SelectOptionProps } from './option';\n\nexport type IComponent = FC<SelectProps> & {\n    Option: FC<SelectOptionProps>;\n};\n\nexport const TransSelect = Select as IComponent;\nTransSelect.Option = Option;\n"],"names":["SelectContext","createContext","Select","props","selectSize","defSize","style","defOptionValue","placeholder","disabled","multiple","name","onChange","onVisibleChange","children","autoFocus","inputRef","useRef","containerRef","selectedValues","setSelectedValues","useState","isOptionOpen","setIsOptionOpen","value","setValue","handleOptionClick","value2","isSelected","updatedValues","v","useEffect","useClickOutside","passedContext","handleClick","e","cleanValue","cleanSelectedValues","renderOptions","React","child","index","childElement","renderMultipleOption","jsxs","jsx","TransIcon","renderInput","Fragment","Input","renderSelect","containerClass","classNames","defStyle","Transition","Option","label","restProps","onSelect","useContext","classes","isSelected2","renderOption","TransSelect"],"mappings":"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"}