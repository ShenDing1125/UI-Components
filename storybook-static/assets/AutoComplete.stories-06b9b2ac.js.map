{"version":3,"file":"AutoComplete.stories-06b9b2ac.js","sources":["../../src/hooks/useDebounce.tsx","../../src/utils/controlScrollbar.ts","../../src/components/AutoComplete/autoComplete.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useDebounce(value: any, delay: number = 300) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = window.setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n    return debouncedValue;\n}\n\nexport default useDebounce;\n","import { RefObject, useRef } from 'react';\r\n\r\nfunction controlScrollbar(containerRef: RefObject<any>, itemsRefAry: RefObject<any>[]) {\r\n    const itemsRef: any[] = itemsRefAry;\r\n    const itemContainerRef = containerRef;\r\n    const baseItemHight = useRef(null); // 每個 item 的固定高度\r\n    const itemContainerHight = useRef(null); // item 容器的高度\r\n    const showItemMaxNum = useRef(-1); // 容器內總共可以顯示多少的 item\r\n    const storeItemMaxPage = useRef(2); // 以容器內的顯示數量，將 item 分成各組，用於紀錄該 item 位於哪一組\r\n    const itemsHight = useRef(-1); // 所有 item 展開的最大高度\r\n    const maxItemsRefLength = useRef(-1);\r\n\r\n    return {\r\n        setScrollbarIndex: (index: number) => {\r\n            // 獲取 scrollbar info\r\n            if (itemContainerRef.current !== null) {\r\n                baseItemHight.current = itemsRef[0].getBoundingClientRect().height;\r\n                itemContainerHight.current = itemContainerRef.current.getBoundingClientRect().height;\r\n            }\r\n            if (baseItemHight.current && itemContainerHight.current) {\r\n                showItemMaxNum.current = Math.floor(itemContainerHight.current / baseItemHight.current);\r\n                itemsHight.current = itemsRef.length * baseItemHight.current;\r\n                maxItemsRefLength.current = itemsRef.length - 1;\r\n            }\r\n\r\n            // 控制 scrollbar 位置\r\n            if (baseItemHight.current && itemContainerHight.current) {\r\n                if (itemsHight.current <= itemContainerHight.current) return;\r\n\r\n                if (index < 0) index = maxItemsRefLength.current;\r\n                if (index > maxItemsRefLength.current) index = 0;\r\n\r\n                if (showItemMaxNum.current !== -1 && index >= showItemMaxNum.current * (storeItemMaxPage.current - 1)) {\r\n                    // 向下滾動\r\n                    if (index >= showItemMaxNum.current * storeItemMaxPage.current) {\r\n                        storeItemMaxPage.current++;\r\n                    }\r\n\r\n                    if (index < showItemMaxNum.current * storeItemMaxPage.current) {\r\n                        itemContainerRef.current.scrollTop =\r\n                            showItemMaxNum.current * (storeItemMaxPage.current - 1) * baseItemHight.current;\r\n                    }\r\n\r\n                    // 向上滾動\r\n                    if (index === showItemMaxNum.current * (storeItemMaxPage.current - 1)) {\r\n                        storeItemMaxPage.current--;\r\n                        itemContainerRef.current.scrollTop =\r\n                            showItemMaxNum.current * storeItemMaxPage.current * baseItemHight.current;\r\n                    }\r\n                }\r\n\r\n                // 回到第一項\r\n                if (index === 0 && storeItemMaxPage.current >= 2) {\r\n                    storeItemMaxPage.current = 2;\r\n                    itemContainerRef.current.scrollTop = 0;\r\n                }\r\n\r\n                // 回到最後一項\r\n                if (index === maxItemsRefLength.current) {\r\n                    storeItemMaxPage.current = Math.floor(itemsRef.length / showItemMaxNum.current + 1);\r\n                    itemContainerRef.current.scrollTop =\r\n                        showItemMaxNum.current * storeItemMaxPage.current * baseItemHight.current;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default controlScrollbar;\r\n","import classNames from 'classnames';\nimport { ChangeEvent, FC, KeyboardEvent, ReactElement, useEffect, useRef, useState } from 'react';\nimport useClickOutside from '../../hooks/useClickOutside';\nimport useDebounce from '../../hooks/useDebounce';\nimport controlScrollbar from '../../utils/controlScrollbar';\nimport { TransIcon } from '../Icon';\nimport Input, { InputProps } from '../Input/input';\nimport Transition from '../Transition';\n\ntype InputSize = 'lg' | 'md' | 'sm';\ntype DefInputSize = { width: string; height: string };\ninterface DataSourceObject {\n    value: string;\n}\nexport type DataSourceType<T = {}> = (T & DataSourceObject) | string;\nexport interface AutoCompleteProps extends Omit<InputProps, 'onSelect' | 'onChange'> {\n    inputSize?: InputSize;\n    defSize?: DefInputSize;\n    remind?: string;\n    disabled?: boolean;\n    debounceTime?: number;\n    onSelect?: (item: DataSourceType) => void;\n    onChange?: (value: string) => void;\n    fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>; // 提供用戶自訂義過濾值類型\n    renderOption?: (item: DataSourceType) => ReactElement; // 提供用戶自訂義渲染方式\n}\n\nconst AutoComplete: FC<AutoCompleteProps> = (props) => {\n    const {\n        inputSize,\n        defSize,\n        remind,\n        onSelect,\n        onChange,\n        fetchSuggestions,\n        renderOption,\n        style,\n        value,\n        disabled,\n        debounceTime,\n        ...restProps\n    } = props;\n    const [inputValue, setInputValue] = useState(value);\n    const [suggestions, setSuggestions] = useState<DataSourceType[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isShowDropdown, setIsShowDropdown] = useState(false);\n    const [highlightIndex, setHighlightIndex] = useState(0);\n    const [isRemind, setIsRemind] = useState(false);\n    const isTriggerSearch = useRef(false); // 防止從標籤<li>獲取input值後再度觸發搜尋\n    const componentRef = useRef<HTMLDivElement>(null);\n    const debouncedValue = useDebounce(inputValue, debounceTime);\n    // control scrollbar by keyboard\n    const itemsRefAry: any[] = [];\n    const itemContainerRef = useRef<any>(null);\n    const { setScrollbarIndex } = controlScrollbar(itemContainerRef, itemsRefAry);\n\n    function cleanSuggestions() {\n        setSuggestions([]);\n    }\n\n    useClickOutside(componentRef, () => {\n        cleanSuggestions();\n        remind && setIsRemind(false);\n    });\n\n    useEffect(() => {\n        if (debouncedValue && isTriggerSearch.current) {\n            cleanSuggestions();\n            const results = fetchSuggestions(debouncedValue);\n            if (results instanceof Promise) {\n                setIsLoading(true);\n                results.then((data) => {\n                    setIsLoading(false);\n                    setSuggestions(data);\n                    data.length > 0 && setIsShowDropdown(true);\n\n                    remind && data.length !== 0 ? setIsRemind(false) : setIsRemind(true);\n                });\n            } else {\n                setSuggestions(results);\n                results.length > 0 && setIsShowDropdown(true);\n\n                remind && results.length !== 0 ? setIsRemind(false) : setIsRemind(true);\n            }\n        } else {\n            setIsShowDropdown(false);\n        }\n        setHighlightIndex(0);\n    }, [debouncedValue, fetchSuggestions]);\n\n    const highlightIndexFn = (index: number) => {\n        const maxLength = suggestions.length - 1;\n        if (index < 0) index = maxLength;\n        if (index > maxLength) index = 0;\n        setHighlightIndex(index);\n    };\n\n    // for label <input>\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.trim();\n        onChange && onChange(value);\n        setInputValue(value);\n\n        isTriggerSearch.current = true; // 從<input>獲取值後，允許搜尋\n    };\n\n    // for label <li>\n    const handleItemClick = (item: DataSourceType) => {\n        onSelect && onSelect(item);\n        if (typeof item === 'string') setInputValue(item);\n        if (typeof item === 'object') setInputValue(item.value);\n        setIsShowDropdown(false);\n\n        isTriggerSearch.current = false; // 從<li>獲取值後，不需重新搜尋\n    };\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        switch (e.key) {\n            case 'ArrowUp':\n                highlightIndexFn(highlightIndex - 1);\n\n                setScrollbarIndex(highlightIndex - 1);\n                break;\n            case 'ArrowDown':\n                highlightIndexFn(highlightIndex + 1);\n\n                setScrollbarIndex(highlightIndex + 1);\n                break;\n            case 'Enter':\n                suggestions[highlightIndex] && handleItemClick(suggestions[highlightIndex]);\n                break;\n            case 'Escape':\n                cleanSuggestions();\n                break;\n            default:\n                break;\n        }\n    };\n\n    const renderTemplate = (item: DataSourceType) => {\n        return renderOption ? renderOption(item) : typeof item === 'string' ? item : item.value;\n    };\n\n    const renderDropdownItem = () => {\n        return suggestions.map((item, index) => {\n            const classes = classNames('suggestion-item', {\n                'is-active': index === highlightIndex\n            });\n            return (\n                <>\n                    <li\n                        key={index}\n                        className={classes}\n                        onClick={handleItemClick.bind(null, item)}\n                        ref={(r) => {\n                            r && itemsRefAry.push(r);\n                        }}>\n                        {renderTemplate(item)}\n                    </li>\n                </>\n            );\n        });\n    };\n\n    const renderDropdown = () => {\n        return (\n            <>\n                <Transition\n                    in={isShowDropdown || isLoading}\n                    animation=\"scale-in-top\"\n                    timeout={300}\n                    onExited={() => {\n                        cleanSuggestions();\n                    }}>\n                    <ul className=\"sd-suggestion-list\" ref={itemContainerRef}>\n                        {isLoading && (\n                            <div className=\"icon-loading\">\n                                <TransIcon icon=\"spinner\" spin />\n                            </div>\n                        )}\n                        {renderDropdownItem()}\n                    </ul>\n                </Transition>\n            </>\n        );\n    };\n\n    const renderRemind = () => {\n        return (\n            <>\n                <Transition\n                    in={isRemind && isTriggerSearch.current && !isLoading}\n                    animation=\"scale-in-top\"\n                    timeout={300}\n                    onExited={() => {\n                        remind && setIsRemind(false);\n                    }}>\n                    {remind && inputValue ? (\n                        <ul className=\"sd-suggestion-list\">\n                            {remind ? <li className=\"suggestion-remind\">{remind}</li> : <></>}\n                        </ul>\n                    ) : (\n                        <></>\n                    )}\n                </Transition>\n            </>\n        );\n    };\n\n    const renderAutoComplete = () => {\n        const classes = classNames('sd-auto-complete', {\n            [`auto-complete-size-${inputSize}`]: inputSize\n        });\n        const defStyle = {\n            width: `${defSize?.width}`,\n            height: `${defSize?.height}`,\n            ...style\n        };\n        return (\n            <>\n                <div className={classes} ref={componentRef} style={defSize}>\n                    <Input\n                        value={inputValue}\n                        style={defStyle}\n                        onChange={handleInputChange}\n                        onKeyDown={handleKeyDown}\n                        disabled={disabled}\n                        {...restProps}\n                    />\n                    {suggestions.length !== 0 ? renderDropdown() : renderRemind()}\n                </div>\n            </>\n        );\n    };\n\n    return <>{renderAutoComplete()}</>;\n};\n\nexport default AutoComplete;\n"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","controlScrollbar","containerRef","itemsRefAry","itemsRef","itemContainerRef","baseItemHight","useRef","itemContainerHight","showItemMaxNum","storeItemMaxPage","itemsHight","maxItemsRefLength","index","AutoComplete","props","inputSize","defSize","remind","onSelect","onChange","fetchSuggestions","renderOption","style","disabled","debounceTime","restProps","inputValue","setInputValue","suggestions","setSuggestions","isLoading","setIsLoading","isShowDropdown","setIsShowDropdown","highlightIndex","setHighlightIndex","isRemind","setIsRemind","isTriggerSearch","componentRef","setScrollbarIndex","cleanSuggestions","useClickOutside","results","data","highlightIndexFn","maxLength","handleInputChange","value2","handleItemClick","item","handleKeyDown","renderTemplate","renderDropdownItem","classes","classNames","jsx","Fragment","r","renderDropdown","Transition","jsxs","TransIcon","renderRemind","renderAutoComplete","defStyle","Input"],"mappings":"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"}